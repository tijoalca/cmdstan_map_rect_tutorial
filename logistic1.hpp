// Code generated by Stan version 2.20.0

#include <stan/model/model_header.hpp>

namespace logistic1_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "/home/tiagocc/tiago.joao.cabaco@gmail.com/Tiago/PhD/2019/analysis/cmdstan_map_rect_tutorial/logistic1.stan");
    reader.add_event(42, 40, "end", "/home/tiagocc/tiago.joao.cabaco@gmail.com/Tiago/PhD/2019/analysis/cmdstan_map_rect_tutorial/logistic1.stan");
    return reader;
}

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
lp_reduce(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta,
              const std::vector<T2__>& xr,
              const std::vector<int>& xi, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,size(xr));

        current_statement_begin__ = 4;
        validate_non_negative_index("y", "n", n);
        std::vector<int  > y(n, int(0));
        stan::math::fill(y, std::numeric_limits<int>::min());
        stan::math::assign(y,stan::model::rvalue(xi, stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::nil_index_list()), "xi"));

        current_statement_begin__ = 5;
        validate_non_negative_index("m", "n", n);
        std::vector<int  > m(n, int(0));
        stan::math::fill(m, std::numeric_limits<int>::min());
        stan::math::assign(m,stan::model::rvalue(xi, stan::model::cons_list(stan::model::index_min_max((n + 1), (2 * n)), stan::model::nil_index_list()), "xi"));

        current_statement_begin__ = 6;
        local_scalar_t__ lp(DUMMY_VAR__);
        (void) lp;  // dummy to suppress unused var warning
        stan::math::initialize(lp, DUMMY_VAR__);
        stan::math::fill(lp, DUMMY_VAR__);
        stan::math::assign(lp,binomial_logit_log(y, m, add(get_base1(beta, 1, "beta", 1), multiply(to_vector(xr), get_base1(beta, 2, "beta", 1)))));


        current_statement_begin__ = 7;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(lp).array())));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct lp_reduce_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta,
              const std::vector<T2__>& xr,
              const std::vector<int>& xi, std::ostream* pstream__) const {
        return lp_reduce(beta, theta, xr, xi, pstream__);
    }
};

class logistic1_model
  : public stan::model::model_base_crtp<logistic1_model> {
private:
        int N;
        std::vector<int> n_redcards;
        std::vector<int> n_games;
        std::vector<double> rating;
        int n_shards;
        int M;
        std::vector<std::vector<int> > xi;
        std::vector<std::vector<double> > xr;
        std::vector<vector_d> theta;
public:
    logistic1_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    logistic1_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "logistic1_model_namespace::logistic1_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];

            current_statement_begin__ = 12;
            validate_non_negative_index("n_redcards", "N", N);
            context__.validate_dims("data initialization", "n_redcards", "int", context__.to_vec(N));
            n_redcards = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("n_redcards");
            pos__ = 0;
            size_t n_redcards_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < n_redcards_k_0_max__; ++k_0__) {
                n_redcards[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 13;
            validate_non_negative_index("n_games", "N", N);
            context__.validate_dims("data initialization", "n_games", "int", context__.to_vec(N));
            n_games = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("n_games");
            pos__ = 0;
            size_t n_games_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < n_games_k_0_max__; ++k_0__) {
                n_games[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 14;
            validate_non_negative_index("rating", "N", N);
            context__.validate_dims("data initialization", "rating", "double", context__.to_vec(N));
            rating = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("rating");
            pos__ = 0;
            size_t rating_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < rating_k_0_max__; ++k_0__) {
                rating[k_0__] = vals_r__[pos__++];
            }


            // initialize transformed data variables
            current_statement_begin__ = 19;
            n_shards = int(0);
            stan::math::fill(n_shards, std::numeric_limits<int>::min());
            stan::math::assign(n_shards,7);

            current_statement_begin__ = 20;
            M = int(0);
            stan::math::fill(M, std::numeric_limits<int>::min());
            stan::math::assign(M,divide(N, n_shards));

            current_statement_begin__ = 21;
            validate_non_negative_index("xi", "n_shards", n_shards);
            validate_non_negative_index("xi", "(2 * M)", (2 * M));
            xi = std::vector<std::vector<int> >(n_shards, std::vector<int>((2 * M), int(0)));
            stan::math::fill(xi, std::numeric_limits<int>::min());

            current_statement_begin__ = 22;
            validate_non_negative_index("xr", "n_shards", n_shards);
            validate_non_negative_index("xr", "M", M);
            xr = std::vector<std::vector<double> >(n_shards, std::vector<double>(M, double(0)));
            stan::math::fill(xr, DUMMY_VAR__);

            current_statement_begin__ = 24;
            validate_non_negative_index("theta", "0", 0);
            validate_non_negative_index("theta", "n_shards", n_shards);
            theta = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(n_shards, Eigen::Matrix<double, Eigen::Dynamic, 1>(0));
            stan::math::fill(theta, DUMMY_VAR__);

            // execute transformed data statements
            current_statement_begin__ = 26;
            for (int i = 1; i <= n_shards; ++i) {
                {
                current_statement_begin__ = 27;
                int j(0);
                (void) j;  // dummy to suppress unused var warning
                stan::math::fill(j, std::numeric_limits<int>::min());
                stan::math::assign(j,(1 + ((i - 1) * M)));

                current_statement_begin__ = 28;
                int k(0);
                (void) k;  // dummy to suppress unused var warning
                stan::math::fill(k, std::numeric_limits<int>::min());
                stan::math::assign(k,(i * M));


                current_statement_begin__ = 29;
                stan::model::assign(xi, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list())), 
                            stan::model::rvalue(n_redcards, stan::model::cons_list(stan::model::index_min_max(j, k), stan::model::nil_index_list()), "n_redcards"), 
                            "assigning variable xi");
                current_statement_begin__ = 30;
                stan::model::assign(xi, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_min_max((M + 1), (2 * M)), stan::model::nil_index_list())), 
                            stan::model::rvalue(n_games, stan::model::cons_list(stan::model::index_min_max(j, k), stan::model::nil_index_list()), "n_games"), 
                            "assigning variable xi");
                current_statement_begin__ = 31;
                stan::model::assign(xr, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::model::rvalue(rating, stan::model::cons_list(stan::model::index_min_max(j, k), stan::model::nil_index_list()), "rating"), 
                            "assigning variable xr");
                }
            }

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 35;
            validate_non_negative_index("beta", "2", 2);
            num_params_r__ += 2;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~logistic1_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 35;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "2", 2);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(2);
        size_t beta_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 35;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(2, lp__);
            else
                beta = in__.vector_constrain(2);

            // model body

            current_statement_begin__ = 38;
            lp_accum__.add(normal_log<propto__>(beta, 0, 1));
            current_statement_begin__ = 39;
            lp_accum__.add(sum(map_rect<1, lp_reduce_functor__>(beta, theta, xr, xi, pstream__)));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "logistic1_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(2);
        size_t beta_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "logistic1_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef logistic1_model_namespace::logistic1_model stan_model;

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

STAN_REGISTER_MAP_RECT(1, logistic1_model_namespace::lp_reduce_functor__)
